pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'ml-service'
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Build Docker Image') {
            steps {
                dir('ml_service') {
                    sh '''
                        echo "ðŸ“‚ Dizin iÃ§eriÄŸi:"
                        ls -la
                        echo "ðŸ“‚ Models klasÃ¶rÃ¼ iÃ§eriÄŸi:"
                        ls -la models/
                        echo "ðŸ”¨ Docker image oluÅŸturuluyor..."
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    '''
                }
            }
        }
        
        stage('Deploy') {
            steps {
                sh '''
                    # Eski container'Ä± durdur ve sil
                    docker stop ml-service || true
                    docker rm ml-service || true
                    
                    # Yeni container'Ä± baÅŸlat
                    docker run -d \
                        --name ml-service \
                        -p 5000:5000 \
                        --restart always \
                        -v /opt/ml-service/logs:/app/logs \
                        -v /opt/ml-service/data:/app/data \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                    
                    # Veri dosyasÄ±nÄ± oluÅŸtur
                    echo "ðŸ“Š Veri dosyasÄ± oluÅŸturuluyor..."
                    docker exec ml-service python data_generator.py
                    
                    # Container iÃ§eriÄŸini kontrol et
                    echo "ðŸ“‚ Container iÃ§eriÄŸi:"
                    docker exec ml-service ls -la /app
                    echo "ðŸ“‚ Models klasÃ¶rÃ¼ iÃ§eriÄŸi:"
                    docker exec ml-service ls -la /app/models
                    echo "ðŸ“‚ Data klasÃ¶rÃ¼ iÃ§eriÄŸi:"
                    docker exec ml-service ls -la /app/data
                '''
            }
        }
    }
    
    post {
        always {
            // Eski image'larÄ± temizle
            sh "docker image prune -f"
        }
    }
} 